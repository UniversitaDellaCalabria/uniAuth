import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'lrx(fg&+2e=$l=y8$!+l68_=-lm3*n+myg%r3z!yjm(lg*l%-z'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
SESSION_EXPIRE_AT_BROWSER_CLOSE=True
SESSION_COOKIE_AGE = 60 * 10 # minutes

# the path corresponding the admin backend, default if not defined: admin/
ADMIN_PATH = 'admin_access'

ALLOWED_HOSTS = ['*']
AUTH_USER_MODEL = 'accounts.User'

INSTALLED_APPS = [
    'accounts',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'sass_processor',
    'bootstrap_italia_template',
    'django_unical_bootstrap_italia',
    'uniauth_saml2_idp',
    'uniauth_unical_template',

    # 'ldap_peoples',
    'multildap',
    'rangefilter']

DATABASES = {
    # 'default': {
        # 'ENGINE': 'django.db.backends.mysql',
        # 'NAME': 'uniauth',
        # 'HOST': 'localhost',
        # 'USER': 'that-user',
        # 'PASSWORD': 'that-password',
        # 'PORT': '',
        # 'OPTIONS': {'init_command': "SET sql_mode='STRICT_TRANS_TABLES'"}
    # },
   'default': {
       'ENGINE': 'django.db.backends.sqlite3',
       'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
   }
}

# needed for ldap admin forms
DATETIME_INPUT_FORMATS = ['%Y-%m-%d %H:%M:%S',
                          '%d/%m/%Y %H:%M:%S']

DATE_INPUT_FORMATS = ['%Y-%m-%d', '%d/%m/%Y']

# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_L10N = True
USE_TZ = True


# email notification on error 500
DEFAULT_FROM_EMAIL = 'idp-noreply@DOMAIN'
SERVER_EMAIL = DEFAULT_FROM_EMAIL
EMAIL_HOST = 'smtpservizi.unical.it'
# EMAIL_HOST_USER = 'myemail@hotmail.com'
# EMAIL_HOST_PASSWORD = 'mypassword'
EMAIL_PORT = 587
EMAIL_USE_TLS = True

ADMINS = [('name surname', 'user1@DOMAIN'),
          ('name surnale', 'user2@DOMAIN'),]

# LOGGING
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'default': {
            # exact format is not important, this is the minimum information
            'format': '%(asctime)s %(name)-12s %(levelname)-8s %(message)s',
        },
        'detailed': {
            'format': '[%(asctime)s] %(message)s [(%(levelname)s)]' # %(name)s.%(funcName)s:%(lineno)s]'
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'mail_admins': {
            'formatter': 'detailed',
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        },
        'console': {
            'formatter': 'detailed',
            'level': 'INFO',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'mail_admins'],
            'level': 'ERROR',
            'propagate': False,
        },
        'uniauth_saml2_idp': {
            'handlers': ['console', 'mail_admins'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'multildap': {
            'handlers': ['console', 'mail_admins'],
            'level': 'DEBUG',
            'propagate': False,
        },
    }
}


if 'multildap' in INSTALLED_APPS or 'ldap_peoples' in INSTALLED_APPS:
    # ldap_peoples related
    # LDAP_CONNECTION_USER = 'cn=thatuser,dc=unical,dc=it'
    # LDAP_CONNECTION_PASSWD = 'Thatpassword'
    # LDAP_DB_URL = 'ldap://localhost:389/'
    LDAP_BASE_DOMAIN = 'testunical.it'
    # LDAP_PEOPLE_DN = 'dc=proxy'


if 'multildap' in INSTALLED_APPS:
    #####################
    # pyMutliLDAP related
    #####################
    import ldap3
    from multildap.client import LdapClient
    # GLOBALS

    # encoding
    ldap3.set_config_parameter('DEFAULT_SERVER_ENCODING',
                               'UTF-8')
    # some broken LDAP implementation may have different encoding
    # than those expected by RFCs
    # ldap3.set_config_paramenter('ADDITIONAL_ENCODINGS', ...)

    # timeouts
    ldap3.set_config_parameter('RESTARTABLE_TRIES', 3)
    ldap3.set_config_parameter('POOLING_LOOP_TIMEOUT', 2)
    ldap3.set_config_parameter('RESET_AVAILABILITY_TIMEOUT', 2)
    ldap3.set_config_parameter('RESTARTABLE_SLEEPTIME', 2)

    # _REWRITE_DN_TO = 'dc=proxy'
    _RS_ATTRIBUTES = ['cn',
                      'eduPersonPrincipalName',
                      'eduPersonEntitlement',
                      'schacHomeOrganizationType',
                      'schacHomeOrganization',
                      'mail',
                      'uid',
                      'givenName',
                      'sn',
                      'eduPersonScopedAffiliation',
                      'schacPersonalUniqueID',
                      'schacPersonalUniqueCode']

    DEFAULT = dict(server =
                       dict(host = 'ldap://ldap.testunical.it:389',
                            connect_timeout = 5,
                            # TLS...
                            ),
                   connection =
                       dict(user = 'uid=idpuser,ou=idp,dc=testunical,dc=it',
                            password = 'idpsecret',
                            read_only = True,
                            version = 3,
                            # see ldap3 client_strategies
                            client_strategy = ldap3.RESTARTABLE,
                            auto_bind = True,
                            pool_size = 10,
                            pool_keepalive = 10),
                    search =
                        dict(search_base = 'ou=people,dc=testunical,dc=it',
                             search_filter = '(objectclass=person)',
                             search_scope = ldap3.SUBTREE,

                             # general purpose for huge resultsets
                             # TODO: implement paged resultset, see: examples/paged_resultset.py
                             # size_limit = 500,
                             # paged_size = 1000, # up to 500000 results
                             # paged_criticality = True, # check if the server supports paged results
                             # paged_cookie = True, # must be sent back while requesting subsequent entries

                             # to get all = # '*'
                             attributes = _RS_ATTRIBUTES
                            ),
                        encoding = 'utf-8',
                      rewrite_rules =
                            [
                             # {'package': 'multildap.attr_rewrite',
                              # 'name': 'replace',
                              # 'kwargs': {'from_str': 'unical', 'to_str': 'lacinu',}},

                             # {'package': 'multildap.attr_rewrite',
                              # 'name': 'regexp_replace',
                              # 'kwargs': {'regexp': 'unical', 'sub': 'gnocc',}},

                             # {'package': 'multildap.attr_rewrite',
                              # 'name': 'add_static_attribute',
                              # 'kwargs': {'name': 'eduPersonOrcid', 'value': 'ingoalla',}},

                             # {'package': 'multildap.attr_rewrite',
                              # 'name': 'copy_attribute_value',
                              # 'kwargs': {'from_attr': 'uid',
                                         # 'to_attr': 'schacPersonalUniqueID',
                                         # 'suffix': '',
                                         # 'prefix': 'urn:schac:personalUniqueID:IT:CF:',
                                         # }},
                            ],

                      # Authentication settings
                      # only needed if behind multildap proxy
                      # rewrite_dn_to = _REWRITE_DN_TO,
                      allow_authentication = True,
                )

    LOCAL = dict(server =
                       dict(host = 'ldap://localhost:389',
                            connect_timeout = 5,
                            # TLS...
                            ),
                   connection =
                       dict(user = 'cn=thatuser,ou=thatou,dc=unical,dc=it',
                            password = 'thatpassword',
                            read_only = True,
                            version = 3,
                            # see ldap3 client_strategies
                            client_strategy = ldap3.RESTARTABLE,
                            auto_bind = True,
                            pool_size = 10,
                            pool_keepalive = 10),
                    search =
                        dict(search_base = 'ou=people,dc=unical,dc=it',
                             search_filter = '(objectclass=person)',
                             search_scope = ldap3.SUBTREE,

                             # general purpose for huge resultsets
                             # TODO: implement paged resultset, see: examples/paged_resultset.py
                             # size_limit = 500,
                             # paged_size = 1000, # up to 500000 results
                             # paged_criticality = True, # check if the server supports paged results
                             # paged_cookie = True, # must be sent back while requesting subsequent entries

                             # to get all = # '*'
                             attributes = _RS_ATTRIBUTES
                            ),
                      encoding = 'utf-8',
                      rewrite_rules =
                            [

                             # {'package': 'multildap.attr_rewrite',
                              # 'name': 'append',
                              # 'kwargs': {'value': '@unical.it',
                                         # 'to_attrs': ['eduPersonPrincipalName',]}},

                             # {'package': 'attr_rewrite',
                              # 'name': 'regexp_replace',
                              # 'kwargs': {'regexp': '', 'sub': '',}},

                            ],
                      # Authentication settings
                      # only needed if behind multildap proxy
                      # rewrite_dn_to = _REWRITE_DN_TO,
                      allow_authentication = True,
                )

    # put multiple connections here
    LDAP_CONNECTIONS = {'DEFAULT' : DEFAULT,
                        # 'LOCAL' : LOCAL
                        }
    LDAP_CONNECTIONS = [LdapClient(conf) for conf in LDAP_CONNECTIONS.values()]
